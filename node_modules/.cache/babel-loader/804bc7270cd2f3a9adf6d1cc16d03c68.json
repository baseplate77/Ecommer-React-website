{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport Collections from \"../pages/collections/Collections\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC7bGA-KQa7J2SdmeT-jwwM6lCu5dQCMS0\",\n  authDomain: \"crwn-db-996d2.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-996d2.firebaseio.com\",\n  projectId: \"crwn-db-996d2\",\n  storageBucket: \"crwn-db-996d2.appspot.com\",\n  messagingSenderId: \"452158234037\",\n  appId: \"1:452158234037:web:cb70e6087b6f2f994c8dfc\",\n  measurementId: \"G-TC3EYZ068E\"\n};\nfirebase.initializeApp(firebaseConfig);\nexport const addCollectionAndDocument = (collectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createAt = new Date();\n\n    try {\n      userRef.set({\n        displayName,\n        email,\n        createAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error in creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst Provider = new firebase.auth.GoogleAuthProvider();\nProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(Provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/NayanJagtap/Desktop/current/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","Collections","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","addCollectionAndDocument","collectionKey","objectToAdd","collectionRef","firestore","collection","console","log","createUserProfileDocument","userAuth","additionalData","userRef","doc","uid","snapshot","get","exists","displayName","email","createAt","Date","set","error","message","auth","Provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,+BAFS;AAGrBC,EAAAA,WAAW,EAAE,sCAHQ;AAIrBC,EAAAA,SAAS,EAAE,eAJU;AAKrBC,EAAAA,aAAa,EAAE,2BALM;AAMrBC,EAAAA,iBAAiB,EAAE,cANE;AAOrBC,EAAAA,KAAK,EAAE,2CAPc;AAQrBC,EAAAA,aAAa,EAAE;AARM,CAAvB;AAWAV,QAAQ,CAACW,aAAT,CAAuBT,cAAvB;AAEA,OAAO,MAAMU,wBAAwB,GAAG,CAACC,aAAD,EAAgBC,WAAhB,KAAgC;AACtE,QAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqBJ,aAArB,CAAtB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAZ;AACD,CAHM;AAKP,OAAO,MAAMK,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGP,SAAS,CAACQ,GAAV,CAAe,SAAQH,QAAQ,CAACI,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,GAAR,EAAvB;;AACA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBT,QAA/B;AACA,UAAMU,QAAQ,GAAG,IAAIC,IAAJ,EAAjB;;AACA,QAAI;AACFT,MAAAA,OAAO,CAACU,GAAR,CAAY;AAAEJ,QAAAA,WAAF;AAAeC,QAAAA,KAAf;AAAsBC,QAAAA,QAAtB;AAAgC,WAAGT;AAAnC,OAAZ;AACD,KAFD,CAEE,OAAOY,KAAP,EAAc;AACdhB,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCe,KAAK,CAACC,OAA5C;AACD;AACF;;AAED,SAAOZ,OAAP;AACD,CAhBM;AAkBP,OAAO,MAAMa,IAAI,GAAGpC,QAAQ,CAACoC,IAAT,EAAb;AACP,OAAO,MAAMpB,SAAS,GAAGhB,QAAQ,CAACgB,SAAT,EAAlB;AAEP,MAAMqB,QAAQ,GAAG,IAAIrC,QAAQ,CAACoC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAerC,QAAf","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\nimport Collections from \"../pages/collections/Collections\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC7bGA-KQa7J2SdmeT-jwwM6lCu5dQCMS0\",\r\n  authDomain: \"crwn-db-996d2.firebaseapp.com\",\r\n  databaseURL: \"https://crwn-db-996d2.firebaseio.com\",\r\n  projectId: \"crwn-db-996d2\",\r\n  storageBucket: \"crwn-db-996d2.appspot.com\",\r\n  messagingSenderId: \"452158234037\",\r\n  appId: \"1:452158234037:web:cb70e6087b6f2f994c8dfc\",\r\n  measurementId: \"G-TC3EYZ068E\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const addCollectionAndDocument = (collectionKey, objectToAdd) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n  console.log(collectionRef);\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const snapshot = await userRef.get();\r\n  if (!snapshot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createAt = new Date();\r\n    try {\r\n      userRef.set({ displayName, email, createAt, ...additionalData });\r\n    } catch (error) {\r\n      console.log(\"error in creating user\", error.message);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst Provider = new firebase.auth.GoogleAuthProvider();\r\nProvider.setCustomParameters({ prompt: \"select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(Provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}