{"ast":null,"code":"import _objectSpread from\"C:/Users/NayanJagtap/Desktop/current/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"C:/Users/NayanJagtap/Desktop/current/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/NayanJagtap/Desktop/current/crwn-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import firebase from\"firebase/app\";import\"firebase/firestore\";import\"firebase/auth\";var firebaseConfig={apiKey:\"AIzaSyC7bGA-KQa7J2SdmeT-jwwM6lCu5dQCMS0\",authDomain:\"crwn-db-996d2.firebaseapp.com\",databaseURL:\"https://crwn-db-996d2.firebaseio.com\",projectId:\"crwn-db-996d2\",storageBucket:\"crwn-db-996d2.appspot.com\",messagingSenderId:\"452158234037\",appId:\"1:452158234037:web:cb70e6087b6f2f994c8dfc\",measurementId:\"G-TC3EYZ068E\"};firebase.initializeApp(firebaseConfig);export var convertCollectionSnapshotToMap=function convertCollectionSnapshotToMap(snapshot){var transformCollection=snapshot.docs.map(function(doc){var _doc$data=doc.data(),title=_doc$data.title,items=_doc$data.items;return{routeName:encodeURI(title.toLowerCase()),title:title,items:items};});return transformCollection.reduce(function(accumulator,collection){accumulator[collection.title.toLowerCase()]=collection;return accumulator;},{});};export var addCollectionAndDocument=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(collectionKey,objectToAdd){var collectionRef,batch;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:collectionRef=firestore.collection(collectionKey);batch=firestore.batch();objectToAdd.forEach(function(obj){var docRef=collectionRef.doc();batch.set(docRef,obj);});_context.next=5;return batch.commit();case 5:return _context.abrupt(\"return\",_context.sent);case 6:case\"end\":return _context.stop();}}},_callee);}));return function addCollectionAndDocument(_x,_x2){return _ref.apply(this,arguments);};}();export var createUserProfileDocument=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(userAuth,additionalData){var userRef,snapshot,displayName,email,createAt;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(userAuth){_context2.next=2;break;}return _context2.abrupt(\"return\");case 2:userRef=firestore.doc(\"users/\".concat(userAuth.uid));_context2.next=5;return userRef.get();case 5:snapshot=_context2.sent;if(!snapshot.exists){displayName=userAuth.displayName,email=userAuth.email;createAt=new Date();try{userRef.set(_objectSpread({displayName:displayName,email:email,createAt:createAt},additionalData));}catch(error){console.log(\"error in creating user\",error.message);}}return _context2.abrupt(\"return\",userRef);case 8:case\"end\":return _context2.stop();}}},_callee2);}));return function createUserProfileDocument(_x3,_x4){return _ref2.apply(this,arguments);};}();export var auth=firebase.auth();export var firestore=firebase.firestore();var Provider=new firebase.auth.GoogleAuthProvider();Provider.setCustomParameters({prompt:\"select_account\"});export var signInWithGoogle=function signInWithGoogle(){return auth.signInWithPopup(Provider);};export default firebase;","map":{"version":3,"sources":["C:/Users/NayanJagtap/Desktop/current/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","convertCollectionSnapshotToMap","snapshot","transformCollection","docs","map","doc","data","title","items","routeName","encodeURI","toLowerCase","reduce","accumulator","collection","addCollectionAndDocument","collectionKey","objectToAdd","collectionRef","firestore","batch","forEach","obj","docRef","set","commit","createUserProfileDocument","userAuth","additionalData","userRef","uid","get","exists","displayName","email","createAt","Date","error","console","log","message","auth","Provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC7bGA-KQa7J2SdmeT-jwwM6lCu5dQCMS0\",\r\n  authDomain: \"crwn-db-996d2.firebaseapp.com\",\r\n  databaseURL: \"https://crwn-db-996d2.firebaseio.com\",\r\n  projectId: \"crwn-db-996d2\",\r\n  storageBucket: \"crwn-db-996d2.appspot.com\",\r\n  messagingSenderId: \"452158234037\",\r\n  appId: \"1:452158234037:web:cb70e6087b6f2f994c8dfc\",\r\n  measurementId: \"G-TC3EYZ068E\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const convertCollectionSnapshotToMap = (snapshot) => {\r\n  const transformCollection = snapshot.docs.map((doc) => {\r\n    const { title, items } = doc.data();\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      title,\r\n      items,\r\n    };\r\n  });\r\n\r\n  return transformCollection.reduce((accumulator, collection) => {\r\n    accumulator[collection.title.toLowerCase()] = collection;\r\n    return accumulator;\r\n  }, {});\r\n};\r\n\r\nexport const addCollectionAndDocument = async (collectionKey, objectToAdd) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n\r\n  const batch = firestore.batch();\r\n\r\n  objectToAdd.forEach((obj) => {\r\n    const docRef = collectionRef.doc();\r\n    batch.set(docRef, obj);\r\n  });\r\n\r\n  return await batch.commit();\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const snapshot = await userRef.get();\r\n  if (!snapshot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createAt = new Date();\r\n    try {\r\n      userRef.set({ displayName, email, createAt, ...additionalData });\r\n    } catch (error) {\r\n      console.log(\"error in creating user\", error.message);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst Provider = new firebase.auth.GoogleAuthProvider();\r\nProvider.setCustomParameters({ prompt: \"select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(Provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}