{"ast":null,"code":"import { takeEvery, call, put, all, select } from \"redux-saga/effects\";\nimport { shopActionType } from \"./shop.type\";\nimport { fetchCollectionSuccess, fetchCollectionFailure } from \"./shop.action\";\nimport { firestore, convertCollectionSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { selectColletionsPerview } from \"./shop.selector\";\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collection\");\n    const snapshot = yield collectionRef.get();\n    const collectionObject = yield call(convertCollectionSnapshotToMap, snapshot);\n    yield put(fetchCollectionSuccess(collectionObject));\n  } catch (error) {\n    yield put(fetchCollectionFailure(error.message));\n  }\n}\nexport function* fetchCollectionStart() {\n  yield takeEvery(shopActionType.FETCH_COLLECTION_START, fetchCollectionsAsync);\n}\nexport function* collectionsCheck() {\n  const collections = select(selectColletionsPerview);\n  console.log(collectiond);\n}\nexport function* onCollectionsCheck() {\n  yield takeLatest(shopActionType.CHECK_COLLECTION, collectionsCheck);\n}\nexport function* shopsagas() {\n  yield all([call(fetchCollectionStart)]);\n}","map":{"version":3,"sources":["C:/Users/NayanJagtap/Desktop/current/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","call","put","all","select","shopActionType","fetchCollectionSuccess","fetchCollectionFailure","firestore","convertCollectionSnapshotToMap","selectColletionsPerview","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionObject","error","message","fetchCollectionStart","FETCH_COLLECTION_START","collectionsCheck","collections","console","log","collectiond","onCollectionsCheck","takeLatest","CHECK_COLLECTION","shopsagas"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,MAApC,QAAkD,oBAAlD;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,sBAAT,EAAiCC,sBAAjC,QAA+D,eAA/D;AACA,SACEC,SADF,EAEEC,8BAFF,QAGO,+BAHP;AAIA,SAASC,uBAAT,QAAwC,iBAAxC;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,MAAI;AACF,UAAMC,aAAa,GAAGJ,SAAS,CAACK,UAAV,CAAqB,YAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,gBAAgB,GAAG,MAAMf,IAAI,CACjCQ,8BADiC,EAEjCK,QAFiC,CAAnC;AAIA,UAAMZ,GAAG,CAACI,sBAAsB,CAACU,gBAAD,CAAvB,CAAT;AACD,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,UAAMf,GAAG,CAACK,sBAAsB,CAACU,KAAK,CAACC,OAAP,CAAvB,CAAT;AACD;AACF;AAED,OAAO,UAAUC,oBAAV,GAAiC;AACtC,QAAMnB,SAAS,CAACK,cAAc,CAACe,sBAAhB,EAAwCT,qBAAxC,CAAf;AACD;AAED,OAAO,UAAUU,gBAAV,GAA6B;AAClC,QAAMC,WAAW,GAAGlB,MAAM,CAACM,uBAAD,CAA1B;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAYC,WAAZ;AACD;AAED,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMC,UAAU,CAACtB,cAAc,CAACuB,gBAAhB,EAAkCP,gBAAlC,CAAhB;AACD;AAED,OAAO,UAAUQ,SAAV,GAAsB;AAC3B,QAAM1B,GAAG,CAAC,CAACF,IAAI,CAACkB,oBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeEvery, call, put, all, select } from \"redux-saga/effects\";\r\nimport { shopActionType } from \"./shop.type\";\r\nimport { fetchCollectionSuccess, fetchCollectionFailure } from \"./shop.action\";\r\nimport {\r\n  firestore,\r\n  convertCollectionSnapshotToMap,\r\n} from \"../../firebase/firebase.utils\";\r\nimport { selectColletionsPerview } from \"./shop.selector\";\r\nexport function* fetchCollectionsAsync() {\r\n  try {\r\n    const collectionRef = firestore.collection(\"collection\");\r\n    const snapshot = yield collectionRef.get();\r\n    const collectionObject = yield call(\r\n      convertCollectionSnapshotToMap,\r\n      snapshot\r\n    );\r\n    yield put(fetchCollectionSuccess(collectionObject));\r\n  } catch (error) {\r\n    yield put(fetchCollectionFailure(error.message));\r\n  }\r\n}\r\n\r\nexport function* fetchCollectionStart() {\r\n  yield takeEvery(shopActionType.FETCH_COLLECTION_START, fetchCollectionsAsync);\r\n}\r\n\r\nexport function* collectionsCheck() {\r\n  const collections = select(selectColletionsPerview);\r\n  console.log(collectiond);\r\n}\r\n\r\nexport function* onCollectionsCheck() {\r\n  yield takeLatest(shopActionType.CHECK_COLLECTION, collectionsCheck);\r\n}\r\n\r\nexport function* shopsagas() {\r\n  yield all([call(fetchCollectionStart)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}